---
title: "Clase 2.1"
format: 
  html:
    toc: true                # Habilita la tabla de contenidos
    toc-title: "Índice de Contenidos"  # Título del índice
    toc-depth: 3             # Nivel de profundidad del índice (hasta h3)
    toc-location: left       # Ubicación del índice (izquierda)
footnotes-hover: true # muestra notas al pie
smooth-scroll: true # suaviza el scroll
editor: visual
code-copy: true            # Permite copiar el código desde el documento
---

## 2. Limpieza de datos

En primer lugar para comenzar nuevamente nuestro proceso de limpieza datos vamos a traer nuestro data frame que ya trabajamos anteriormente

```{r, echo=TRUE, results='hide'}

library(readxl)
library(dplyr)

```

```{r}

dengue_limpio <- read_excel("C:/Users/flor/Desktop/cursor_2024/VigilanciaenR/Clase 2/dengue_limpio.xlsx")

# "C:\Users\flor\Desktop\cursor_2024\VigilanciaenR\Clase 2\dengue_limpio.xlsx"

```

En primer lugar **cambio las fechas para que esten en el formato adecuado**

```{r}

dengue_limpio <- dengue_limpio %>%
  mutate(across(c("Fecha de toma de muestra", "Fecha de inicio de síntomas", "Fecha Apertura", "Fecha Nacimiento"), as.Date))

```

Confirmo que se realizó:

```{r}

str(dengue_limpio)

```

## 2.3 Creación y modificación de columnas

## 

Para ello vamos a utilizar la función **`mutate()`** del paquete `dplyr.`

Los dos primeros argumentos de `mutate()`son: `.data`y `...`. El valor que se pasa a `.data`siempre debe ser un marco de datos. Por lo general se pasa marcos de datos al `.data`argumento utilizando el operador de barra vertical (por ejemplo, `df %>% mutate()`).

El valor que se pasa al `...`argumento debe ser un par nombre-valor o varios pares nombre-valor separados por comas. El `...`argumento es donde se indica si `mutate()`va acrear o modificar columnas en el marco de datos.

Con esto podemos crear y modificar columnas existentes. Además usaremos la **`case_when()`** para que pueda generar una secuencia de condiciones. **Esta evalúa cada fórmula bilateral secuencialmente hasta que encuentra una condición que se cumple.** Si nunca encuentra una condición que se cumpla, entonces devuelve un `NA`.

Para este ejemplo primero vamos transformar y crear versiones factoriales de variables para que sea más simple:

```{r}

dengue_lim2 <- dengue_limpio %>%
  mutate(clasificación = case_when(
     is.na(Resultado) ~ NA_character_,
    
     # Casos confirmados
    (Determinación %in% c("Anticuerpos neutralizables", "Antígeno NS1", "Genoma viral", "IgG DENV", "IgM DENV") &      Resultado %in% c("Positivo", "Reactivo", "Virus dengue sin serotipo")) ~ "confirmado",
    
    Determinación %in% c("IgM CHIKV") &
       Resultado %in% c("Positivo", "Reactivo") ~ "confirmado_chikv",
    
    # Casos sospechosos
    Determinación %in% c("IgG DENV", "IgM DENV","Genoma viral","Anticuerpos neutralizables", "Antígeno NS1") & 
      Resultado %in% c("No detectable", "Inespecífico", "Negativo") ~ "sospechoso",
    
     Determinación %in% c("IgM CHIKV") &
       Resultado %in% c("No detectable", "Inespecífico") ~ "sospechoso_chikv",
    
    # Casos negativos
    Determinación %in% c("IgG DENV", "IgM DENV","Genoma viral","Anticuerpos neutralizables","Antígeno NS1") & 
    Resultado %in% c("Negativo", "No reactivo") ~ "negativo",
    
    Determinación %in% c("IgM CHIKV") &
       Resultado %in% c("No detectable", "Inespecífico") ~ "negativo_chikv",
    
    # Casos no procesados
    Resultado %in% c("No procesada", "NA") ~ "no procesado",
    
    # Casos indeterminados
    TRUE ~ "Indeterminado"
  ))


```

**Esto es lo que hicimos arriba**

-   **`dengue_lim2 <- dengue_limpio %>%`**: Esto utiliza el pipe (`%>%`) para aplicar una transformación sobre el dataset `dengue_sheet` y guardar los resultados de vuelta en el mismo dataset

    -   **`mutate(clasificación = case_when(...))`**`:`

    -   **`mutate()`** es una función de `dplyr` que se utiliza para crear o modificar columnas en un `data.frame`. Aquí estamos creando una nueva columna llamada `clasificación`.

    -   **`case_when()`** se usa para crear condiciones lógicas. Evalúa las condiciones y devuelve un valor dependiendo de cuál de ellas es verdadera. Funciona como un "si... entonces".

-   **Casos con `NA` en la columna `Resultado`:** Si el valor de `Resultado` es `NA`, el caso quedará clasificado como `NA_character_`, lo que significa que la columna `clasificación` también recibirá un valor `NA`. Esto ocurre debido a la primera condición del `case_when`:

-   **`determinación %in% c(...) & resultado %in% c(...) ~ "confirmado"`**:

    -   Aquí estamos definiendo los casos "confirmados". Se busca si la columna `determinación` contiene alguno de los valores en el vector `c("Anticuerpos neutralizables", "Antígeno NS1", "Genoma viral")` **y** la columna `resultado` contiene alguno de los valores en el vector `c("Positivo", "Reactivo", "Virus dengue sin serotipo")`.

    -   Si ambas condiciones son verdaderas, el resultado para esa fila será `"confirmado"`.

-   **`determinación %in% c(...) & resultado %in% c(...) ~ "sospechoso"`**:

    -   Similar al bloque anterior, pero define los casos como "sospechosos". Aquí evaluamos si la columna `determinación` tiene valores como `IgG DENV`, `IgM DENV`, `IgM CHIKV`, y si la columna `resultado` contiene valores como `No detectable` o `Inespecífico`.

-   **`resultado %in% c("Negativo", "No reactivo") ~ "negativo"`**:

    -   Esta línea evalúa si el `resultado` es "Negativo" o "No reactivo". Si lo es, la fila se clasifica como `"negativo"`. No requiere condiciones adicionales sobre la columna `determinación`.

-   **`resultado %in% c("No procesada", "NA") ~ "no procesado"`**:

    -   Evalúa si el `resultado` es "No procesada" o `NA` (falta de datos). Si lo es, el caso se clasifica como `"no procesado"`.

-   **`TRUE ~ "indeterminado"`**:

    -   Este es un "catch-all" que captura cualquier fila que no cumpla con ninguna de las condiciones anteriores. El valor `TRUE` significa "si ninguna de las condiciones anteriores es verdadera", y clasifica esos casos como `"indeterminado"`.

Confirmo la cantidad de valores para cada uno de los resultados en la nueva columna clasificación:

```{r}

table(dengue_lim2$clasificación)

```

------------------------------------------------------------------------

**Vamos a dejar a mano las operaciones posibles con las distintas variables:**

**Operación con variables numéricas de funciones aritméticas:**

![](C:/Users/flor/Desktop/cursor_2024/VigilanciaenR/Clase%202/imagenes/arithmetic.png){width="616"}

**Operación con variable de carcarcter:**

![](C:/Users/flor/Desktop/cursor_2024/VigilanciaenR/Clase%202/imagenes/comparison-character.png "Variables de caracter"){width="611"}

**Operaciones de comparación con números:**

![](C:/Users/flor/Desktop/cursor_2024/VigilanciaenR/Clase%202/imagenes/comparison-numeric.png){width="614"}

**Operación con operadores lógicos:**

![](C:/Users/flor/Desktop/cursor_2024/VigilanciaenR/Clase%202/imagenes/logical.png){width="609"}

## 2.4 Recodificación de variables

## 

La contracción de variables significa combinar dos o más valores de nuestra variable. Podemos realizar una contracción de variables continuas en categorías o podemos realizar una contracción de categorías en categorías más amplias. Después de contracción de una variable, siempre contiene menos valores posibles (y más amplios) que los que contenía antes de contracción.

Vamos entonces a colapsar la columna "Clasificación manual del caso" en una nueva columna de "Clasificacion"

Primero obtenemos los valores únicos de la columna "Clasificación manual del caso":

```{r}


unique(dengue_limpio$`Clasificación manual del caso`)

```

Ahora armaremos un nuevo data frame con la clasificacíon de variables:

```{r}

dengue_clasif <- dengue_limpio %>%
  mutate(
    clasificacion_casos = case_when(
      # Clasificación de casos confirmados
      `Clasificación manual del caso` %in% c(
        "Caso de Dengue en brote con laboratorio (+)", 
        "Caso confirmado sin serotipo", 
        "Caso confirmado DEN-1", 
        "Caso con coinfección de más de un serotipo de Dengue", 
        "Caso confirmado DEN-2", 
        "Caso confirmado por nexo epidemiológico importado", 
        "Caso confirmado", 
        "Caso confirmado por nexo epidemiológico autóctono"
      ) ~ "confirmado",  
      
      # Clasificación de casos descartados
      `Clasificación manual del caso` %in% c(
        "Caso descartado por epidemiología", 
        "Caso descartado por diagnóstico diferencial", 
        "Caso descartado"
      ) ~ "descartado",  
      
      # Clasificación de casos sospechosos
      `Clasificación manual del caso` %in% c(
        "Caso sospechoso", 
        "Caso sospechoso no conclusivo"
      ) ~ "sospechoso",
      
      # Clasificación de casos probables
      `Clasificación manual del caso` %in% c("Caso probable") ~ "probable",
      
      # Para todos los otros casos no definidos anteriormente, devuelve NA
      TRUE ~ NA_character_
    )
  )

```

-   **`case_when(...)`**:

    -   `case_when()` permite crear una nueva variable con base en una serie de condiciones, en este caso, para clasificar los casos de dengue.

    -   Si una de las condiciones se cumple, el valor correspondiente será asignado a la nueva columna `clasificacion_casos`.

Esto es lo anterior:

-   **`case_when`**: Evalúa las condiciones de la columna `Resultado`.

-   **`%in%`**: Se usa para verificar si los valores de `Resultado` pertenecen a un conjunto de posibles valores.

-   **`~`**: Asocia la condición con el valor de salida.

-   **`TRUE ~ NA_character_`**: Si un valor no coincide con ninguna condición previa, se asigna `NA` como valor.

Si el valor de la columna `Clasificación manual del caso` está en la lista de casos confirmados (que incluye varios tipos de clasificaciones como "Caso confirmado DEN-1", "Caso confirmado por nexo epidemiológico", etc.), se asigna el valor `"confirmado"` a la nueva columna `clasificacion_casos`.

------------------------------------------------------------------------

***A modo de ejemplo:***

Otra forma de continuar el proceso es trabajar con variables numéricas:

Y ahora por ejemplo la convierto en números:

```{r}
dengue_ejemplo <- dengue_clasif %>%
  mutate(
    resultados_num = case_when(
      `Clasificación manual del caso` == "confirmado" ~ 1,
      `Clasificación manual del caso` == "descartado" ~ 0,
      `Clasificación manual del caso` == "sospechoso" ~ 2,
      `Clasificación manual del caso` == "probable" ~ 3,
      TRUE ~ NA_real_  # Asigna NA a los valores que no coincidan
    )
  )

```

------------------------------------------------------------------------

## 2.5 Generación de ID

Vamos a generar un Id de los datos a partir de la fecha de toma de muestra y dni

Para crear un **ID único de caso** basado en las **fechas de toma de muestra de laboratorio** y el **DNI** (o número de identificación), puedes concatenar estos valores en una nueva columna para asegurarte de que cada combinación sea única. A continuación te muestro cómo puedes hacerlo en R utilizando `mutate()` de `dplyr`.

Antes vamos seleccionar los casos con los que vamos a trabajar para que el ID este asociado a esto. Para ello vamos a utilizar la función **`filter()`**

```{r}


# Primero voy a seleccionar solo los casos de Dengue y de Chaco y año 2024

library(dplyr)
library(lubridate)

dengue_id <- dengue_clasif %>%
  filter(Evento == "Dengue" &
           `Provincia Residencia` == "Chaco" &
           year(`Fecha de toma de muestra`) == 2024)  # Cambia 2024 por el año que quieras filtrar

```

-   **`filter(...)`**:

    -   La función `filter()` de `dplyr` se utiliza para seleccionar filas que cumplen con ciertas condiciones. En este caso, está filtrando las filas del data frame basado en tres condiciones.

-   **`Evento == "Dengue"`**:

    -   Esta condición selecciona solo las filas donde la columna `Evento` es igual a "Dengue". Aquí estás buscando eventos que estén clasificados específicamente como "Dengue".

-   **`Provincia Residencia == "Chaco"`**:

    -   Esta condición selecciona solo las filas donde la columna `Provincia Residencia` es igual a "Chaco". Esto filtra los datos para incluir solo aquellos que están asociados con la provincia de Chaco.

-   **`year(`Fecha de toma de muestra`) == 2024`**:

    -   La función `year()` se utiliza para extraer el año de una columna de tipo fecha. Aquí se está extrayendo el año de la columna `Fecha de toma de muestra` y se está filtrando para que solo se incluyan las filas donde el año es igual a 2024. Nota que para usar `year()`, necesitas tener el paquete `lubridate` cargado.

**Ahora si con nuestro data frame vamos a contruir un ID con numero de documento y fecha de toma de muestra para que tengan valores únicos:**

```{r}


# Crear un ID único de caso

dengue_id <- dengue_id %>%
  mutate(id_caso = paste(`Nro Doc`, `Fecha de toma de muestra`, sep = "_")) %>% 
  mutate(across(where(is.character), ~ na_if(., "*SIN DATO* (*SIN DATO*)")))

dengue_id


```

-   **`mutate(id_caso = paste(`Nro Doc`,`Fecha de toma de muestra`, sep = "_"))`**:

    -   La función `mutate()` de `dplyr` se usa para crear nuevas columnas o modificar columnas existentes en un data frame.

    -   Aquí se está creando una nueva columna llamada `id_caso` que se construye concatenando el valor de la columna `Nro Doc` y la columna `Fecha de toma de muestra`, separados por un guion bajo (`_`).

    -   La función `paste()` se utiliza para concatenar los valores de las dos columnas. El argumento `sep = "_"` especifica que el separador entre los valores debe ser un guion bajo.

-   **`mutate(across(where(is.character), ~ na_if(., "*SIN DATO* (*SIN DATO*)")))`**:

    -   La función `across()` permite aplicar una función a múltiples columnas seleccionadas.

    -   `where(is.character)` selecciona todas las columnas que son de tipo carácter.

    -   `~ na_if(., "*SIN DATO* (*SIN DATO*)")` es una función anónima (también conocida como función lambda) que aplica `na_if()` a cada columna seleccionada. `na_if()` reemplaza los valores especificados con `NA`.

    -   En este caso, `na_if(., "*SIN DATO* (*SIN DATO*)")` reemplaza todas las ocurrencias del texto "*SIN DATO* (*SIN DATO*)" con `NA` en las columnas de carácter.

### Exportar tabla limpia

```{r}

library(writexl)

# Guardar en una ruta específica

write_xlsx(dengue_id, path = "C:/Users/flor/Desktop/cursor_2024/VigilanciaenR/dengue_id.xlsx")

```
