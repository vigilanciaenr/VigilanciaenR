---
title: "Mapas_chaco"
format:
  html:
    code-copy: true
    toc: true       # Habilitar el índice
    toc-depth: 3    # Niveles de encabezado a incluir (1 = h1, 2 = h2, etc.)
    toc-location: left  # Posición del índice (left, right)
---

## Elaboración de mapas en R

Para hacer mapas en R, existen varios paquetes que facilitan el trabajo con datos espaciales:

1.  **`sf`**: Permite trabajar con datos espaciales de manera eficiente, soportando la lectura, escritura y manipulación de archivos de formato shapefile (SHP).

2.  **`tmap`**: Ideal para crear mapas estáticos y dinámicos con una interfaz intuitiva.

3.  **`ggplot2`** con **`geom_sf`**: También se puede usar para visualizar datos espaciales dentro del entorno de gráficos de ggplot.

4.  **`leaflet`**: Permite crear mapas interactivos basados en web directamente desde R.

### ¿Qué es un archivo SHP?

Un archivo **SHP (Shapefile)** es un formato común para almacenar datos geoespaciales vectoriales. Contiene información sobre la geometría de los objetos espaciales (puntos, líneas o polígonos), como regiones o límites administrativos, que se puede visualizar en un mapa.

### ¿Qué es una proyección?

Una **proyección cartográfica** es un método para representar la superficie curva de la Tierra en un plano. Cada proyección tiene distorsiones en área, forma, distancia o dirección, y es fundamental elegir la proyección adecuada según el análisis que se quiera realizar. Las más comunes son las proyecciones UTM y la WGS84.

## Lectura de archivos shape o geojson

### Descargar archivos geoespaciales

Para obtener los polígonos de los departamentos de Argentina, diríjanse a la siguiente página:

-   [**IGN: Polígonos de departamentos**](https://ramsac.ign.gob.ar/api/v1/capas-sig/Geodesia+y+demarcaci%C3%B3n/L%C3%ADmites/departamento/json)

Allí podrán descargar los archivos en formato **SHP** o **GeoJSON**.

### Leer archivos SHP o GeoJSON en R

```{r results = "hide", warning = FALSE,message = FALSE }
#activo los siguentes paquetes
library(sf)
library(tidyverse)
library(readxl)
library(DT)
library(classInt)  # Para calcular los Natural Breaks en mapas
library(scales)
library(RColorBrewer)
library(leaflet)
library(htmltools)
library(ggspatial)
library(prettymapr)

options(scipen = 999)
```

Una vez descargados los archivos, pueden leerlos en R utilizando el siguiente código:

```{r}
# Leer el archivo SHP localmente
departamentos <- read_sf("C:/Users/penninivel/Downloads/departamento (1)/departamento.shp")

# Visualizar los primeros registros del shapefile
head(departamentos)
```

Mostraremos filtrado un recorte de Chaco

```{r, primera_vista}


chaco <- departamentos %>% 
  dplyr::filter(str_starts(in1, "22"))

DT::datatable(chaco)
plot(chaco)

ggplot()+
  geom_sf(data = chaco)


```

### Leer dataset de casos de dengue

```{r}
datos_dengue <- read_excel("C:/Users/penninivel/Downloads/Reporte dengue & chiku marzo 2024.xlsx")

# Definir las categorías de casos confirmados
categorias_confirmadas <- c(
  "Caso con coinfección de más de un serotipo de Dengue",
  "Caso confirmado",
  "Caso confirmado DEN-1",
  "Caso confirmado DEN-2",
  "Caso confirmado por nexo epidemiológico autóctono",
  "Caso confirmado por nexo epidemiológico importado",
  "Caso confirmado sin serotipo",
  "Caso de Dengue en brote con laboratorio (+)"
)

# Filtrar el dataset para solo incluir casos confirmados y contar por Departamento Residencia

casos_por_departamento <- datos_dengue %>%
  filter(`Clasificación manual del caso` %in% categorias_confirmadas,
         `Provincia Residencia`=="Chaco") %>%
  count(`Departamento Residencia`, name = "casos_confirmados")

# Reemplazar "1° de Mayo" por "1º de Mayo"
chaco$nam <- gsub("1° de Mayo", "1 de Mayo", chaco$nam)
casos_por_departamento$`Departamento Residencia` <- gsub("1º de Mayo", "1 de Mayo", casos_por_departamento$`Departamento Residencia`)
casos_por_departamento_mapa <- chaco %>% left_join(casos_por_departamento, by= c("nam"="Departamento Residencia"))  
DT::datatable(casos_por_departamento_mapa)

```
## Elaboración de mapa en ggplot2
```{r}
# Calcular los cortes utilizando Jenks Natural Breaks
breaks <- classInt::classIntervals(casos_por_departamento_mapa$casos_confirmados, n = 5, style = "jenks",cutlabels=F)$brks
breaks
# Crear las categorías basadas en los Natural Breaks
casos_por_departamento_mapa <- casos_por_departamento_mapa %>%
  mutate(casos_categoria = cut(casos_confirmados, 
                               breaks = breaks,
                               dig.lab = 5,
                               include.lowest = T))

table(casos_por_departamento_mapa$casos_categoria)
# Crear el mapa con categorías en base a quintiles
ggplot() +
  # Agregar mapa de fondo
  #annotation_map_tile(type = "cartolight") +  # Usa "cartolight" como fondo, puedes cambiar a otros

  geom_sf(data = casos_por_departamento_mapa,
          aes(fill = casos_categoria,
              geometry = geometry),
          color = 'black',
          size = 0.2) +
  scale_fill_brewer(palette = "YlOrRd", name = "Casos Confirmados",
                    ) + # Escala de colores y leyenda
  labs(title = "Distribución de Casos Confirmados de Dengue por Departamento, pcia. de Chaco. Año 2024.*",
       fill = "Casos Confirmados",
       caption = "*Hasta SE32. 2 casos no están contabilizados en el mapa porque no tiene dato de residencia\n Fuente: Elaboración prpia con datos de la direccion de Epidemiología.") + # Título y leyenda
   # Agregar la escala
 annotation_scale(location = "bl", width_hint = 0.2, 
                   bar_cols = c("black", "white"),  # Alternar colores para cada parte
                   text_col = "black",  # Color del texto de la escala
                   style = "ticks") +        # Divisiones de la escala
  # Agregar la rosa de los vientos
  annotation_north_arrow(location = "tr", which_north = "true",  # "tr" es "top right"
                         pad_x = unit(0.3, "in"), pad_y = unit(0.3, "in"),
                         style = north_arrow_fancy_orienteering,
                         height = unit(1, "cm"), width = unit(1, "cm")) +
  
  
  theme_minimal()
```



## Uso del paquete **Leaflet**

Ahora vamos a hacer el mismo mapa con el paquete **Leaflet**

El paquete **Leaflet** es una herramienta poderosa y fácil de usar para crear mapas interactivos en R. A continuación, se describen algunos aspectos importantes a tener en cuenta al usar **Leaflet**:

1.  **Mapas base (Tiles)**: Leaflet permite agregar mapas base de diferentes proveedores, como **OpenStreetMap**, **CartoDB**, o **Esri**. Para agregar un mapa de fondo, usamos `addProviderTiles()`.

    ```{r eval = FALSE }
    leaflet() %>%   addProviderTiles("OpenStreetMap") %>%   addPolygons(...)  # Agregar polígonos u otras capas 
    ```

2.  **Capas de datos**: Puedes agregar datos vectoriales como polígonos (`addPolygons()`), puntos (`addMarkers()`), o líneas (`addPolylines()`) sobre el mapa. Los datos deben estar en formato `sf` o `sp`.

3.  **Paletas de colores**:
    Para visualizar variables numéricas en mapas, se usan funciones como `colorNumeric()`, `colorBin()`, o `colorQuantile()` para asignar colores a los valores de las variables.

    ```{r eval = FALSE }
    pal <- colorBin(palette = "YlOrRd", domain = datos$variable, bins = 5)
    ```

4.  **Interactividad**:
    Leaflet permite agregar etiquetas o popups interactivos que muestran información cuando el usuario hace clic o pasa el ratón sobre los elementos. Puedes personalizarlos con HTML y las funciones `label` o `popup`.

```{r}

# Calcular los cortes utilizando Jenks Natural Breaks
breaks <- classInt::classIntervals(casos_por_departamento_mapa$casos_confirmados, n = 5, style = "jenks")$brks

# Crear una paleta de colores basada en los Natural Breaks
pal <- colorBin(palette = "YlOrRd", 
                domain = casos_por_departamento_mapa$casos_confirmados, 
                bins = breaks)
# Crear el mapa en Leaflet

labeltext <- paste0("<strong>Departamento:</strong> ", casos_por_departamento_mapa$nam, "<br>","<strong>Casos Confirmados:</strong> ", casos_por_departamento_mapa$casos_confirmados)

leaflet(casos_por_departamento_mapa) %>%
  addProviderTiles("CartoDB.Positron") %>%
  addPolygons(
    fillColor = ~pal(casos_confirmados),
    color = "black",
    weight = 1,
    fillOpacity = 0.7,
    label = lapply(labeltext, htmltools::HTML),
    highlightOptions = highlightOptions(
      weight = 3,
      color = "white",
      bringToFront = TRUE
    )
  ) %>%
  addLegend(pal = pal, 
            values = ~casos_confirmados, 
            opacity = 0.7, 
            title = "Casos Confirmados",
            position = "bottomright") %>% 
  #Agrego escala
  addScaleBar(position = "bottomleft", options = scaleBarOptions(imperial = FALSE))
```
